import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:flutter/foundation.dart';
import 'auth_service.dart';

class AnalyticsService {
  static final FirebaseAnalytics _analytics = FirebaseAnalytics.instance;

  // Initialiser Analytics
  static Future<void> initialize() async {
    await _analytics.setAnalyticsCollectionEnabled(true);
    if (kDebugMode) {
      debugPrint('üìä Firebase Analytics initialis√©');
    }
  }

  // D√©finir l'utilisateur
  static Future<void> setUser() async {
    final user = AuthService.currentUser;
    if (user != null) {
      await _analytics.setUserId(id: user.uid);
      await _analytics.setUserProperty(
        name: 'user_type',
        value: 'authenticated',
      );
      if (kDebugMode) {
        debugPrint('üë§ Utilisateur d√©fini dans Analytics: ${user.email}');
      }
    } else {
      await _analytics.setUserProperty(
        name: 'user_type',
        value: 'anonymous',
      );
    }
  }

  // √âv√©nements d'authentification
  static Future<void> logLogin() async {
    await _analytics.logLogin(loginMethod: 'google');
    if (kDebugMode) {
      debugPrint('üîê √âv√©nement: Connexion Google');
    }
  }

  static Future<void> logSignUp() async {
    await _analytics.logSignUp(signUpMethod: 'google');
    if (kDebugMode) {
      debugPrint('üìù √âv√©nement: Inscription Google');
    }
  }

  static Future<void> logLogout() async {
    await _analytics.logEvent(name: 'logout');
    if (kDebugMode) {
      debugPrint('üö™ √âv√©nement: D√©connexion');
    }
  }

  // √âv√©nements de navigation avec noms personnalis√©s
  static Future<void> logScreenView(String screenName) async {
    // Cr√©er des noms d'√©v√©nements personnalis√©s plus explicites
    final customEventName = 'visit_${screenName.toLowerCase()}';
    
    await _analytics.logEvent(
      name: customEventName,
      parameters: {
        'screen_name': screenName,
        'screen_class': 'BudgetApp',
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      },
    );
    
    // Aussi envoyer l'√©v√©nement screen_view standard
    await _analytics.logScreenView(screenName: screenName);
    
    if (kDebugMode) {
      debugPrint('üì± √âcran visit√©: $screenName (√©v√©nement: $customEventName)');
    }
  }

  // √âv√©nements financiers personnalis√©s
  static Future<void> logAddTransaction({
    required String type, // 'income' ou 'expense'
    required double amount,
    required String category,
  }) async {
    // √âv√©nement principal
    await _analytics.logEvent(
      name: 'budget_add_$type',
      parameters: {
        'transaction_type': type,
        'amount': amount,
        'category': category,
        'currency': 'EUR',
        'method': 'quick_add',
      },
    );
    
    // √âv√©nement de valeur pour mesurer l'impact financier
    await _analytics.logEvent(
      name: 'financial_activity',
      parameters: {
        'activity_type': 'add_transaction',
        'value': amount,
        'currency': 'EUR',
        'category': category,
      },
    );
    
    if (kDebugMode) {
      debugPrint('üí∞ √âv√©nement: Transaction ajout√©e (budget_add_$type: ‚Ç¨$amount)');
    }
  }

  static Future<void> logDeleteTransaction({
    required String type,
    required double amount,
  }) async {
    await _analytics.logEvent(
      name: 'delete_transaction',
      parameters: {
        'transaction_type': type,
        'amount': amount,
        'currency': 'EUR',
      },
    );
    if (kDebugMode) {
      debugPrint('üóëÔ∏è √âv√©nement: Transaction supprim√©e');
    }
  }

  // √âv√©nements d'objectifs
  static Future<void> logAddGoal({
    required String goalName,
    required double targetAmount,
  }) async {
    await _analytics.logEvent(
      name: 'add_goal',
      parameters: {
        'goal_name': goalName,
        'target_amount': targetAmount,
        'currency': 'EUR',
      },
    );
    if (kDebugMode) {
      debugPrint('üéØ √âv√©nement: Objectif ajout√© ($goalName: ‚Ç¨$targetAmount)');
    }
  }

  // √âv√©nements d'engagement
  static Future<void> logFeatureUsed(String featureName) async {
    await _analytics.logEvent(
      name: 'feature_used',
      parameters: {
        'feature_name': featureName,
      },
    );
    if (kDebugMode) {
      debugPrint('‚ö° √âv√©nement: Fonctionnalit√© utilis√©e ($featureName)');
    }
  }

  // √âv√©nements de performance utilisateur
  static Future<void> logUserEngagement({
    required String action,
    required int timeSpent, // en secondes
  }) async {
    await _analytics.logEvent(
      name: 'user_engagement',
      parameters: {
        'action': action,
        'time_spent': timeSpent,
      },
    );
    if (kDebugMode) {
      debugPrint('‚è±Ô∏è √âv√©nement: Engagement utilisateur ($action: ${timeSpent}s)');
    }
  }

  // M√©thode g√©n√©rique pour envoyer des √©v√©nements personnalis√©s
  static Future<void> logEvent({
    required String name,
    Map<String, Object>? parameters,
  }) async {
    await _analytics.logEvent(
      name: name,
      parameters: parameters,
    );
    if (kDebugMode) {
      debugPrint('üìä √âv√©nement personnalis√©: $name');
    }
  }

  // √âv√©nements sp√©cifiques pour chaque section de l'app
  static Future<void> logHomeVisit() async {
    await _analytics.logEvent(
      name: 'budget_home_visited',
      parameters: {
        'section': 'home',
        'feature': 'dashboard',
      },
    );
    if (kDebugMode) {
      debugPrint('üè† Page d\'accueil visit√©e');
    }
  }

  static Future<void> logPlaisirsVisit() async {
    await _analytics.logEvent(
      name: 'budget_plaisirs_visited',
      parameters: {
        'section': 'plaisirs',
        'feature': 'goals_management',
      },
    );
    if (kDebugMode) {
      debugPrint('üéâ Section Plaisirs visit√©e');
    }
  }

  static Future<void> logEntreesVisit() async {
    await _analytics.logEvent(
      name: 'budget_entrees_visited',
      parameters: {
        'section': 'entrees',
        'feature': 'income_tracking',
      },
    );
    if (kDebugMode) {
      debugPrint('üí∞ Section Entr√©es visit√©e');
    }
  }

  static Future<void> logSortiesVisit() async {
    await _analytics.logEvent(
      name: 'budget_sorties_visited',
      parameters: {
        'section': 'sorties',
        'feature': 'expense_tracking',
      },
    );
    if (kDebugMode) {
      debugPrint('üí∏ Section Sorties visit√©e');
    }
  }

  static Future<void> logAnalyseVisit() async {
    await _analytics.logEvent(
      name: 'budget_analyse_visited',
      parameters: {
        'section': 'analyse',
        'feature': 'analytics_dashboard',
      },
    );
    if (kDebugMode) {
      debugPrint('üìä Section Analyse visit√©e');
    }
  }

  static Future<void> logCategoryUsage(String category) async {
    await _analytics.logEvent(
      name: 'category_used',
      parameters: {
        'category': category,
      },
    );
    if (kDebugMode) {
      debugPrint('üè∑Ô∏è √âv√©nement: Cat√©gorie utilis√©e ($category)');
    }
  }

  // √âv√©nements d'erreur (optionnel)
  static Future<void> logError({
    required String errorType,
    required String errorMessage,
  }) async {
    await _analytics.logEvent(
      name: 'app_error',
      parameters: {
        'error_type': errorType,
        'error_message': errorMessage,
      },
    );
    if (kDebugMode) {
      debugPrint('‚ùå √âv√©nement: Erreur ($errorType)');
    }
  }

  // M√©triques de conversion
  static Future<void> logConversion(String conversionType) async {
    await _analytics.logEvent(
      name: 'conversion',
      parameters: {
        'conversion_type': conversionType,
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      },
    );
    if (kDebugMode) {
      debugPrint('üéØ √âv√©nement: Conversion ($conversionType)');
    }
  }
}